
def bfs():
    flag = False
    visited = [[0] * N for _ in range(N)]
    for i in range(N):
        for j in range(N):
            if visited[i][j]:
                continue
            q = []
            visited[i][j] = True
            q.append((i, j))
            res = mat[i][j]
            k = 0
            while k < len(q):
                x, y = q[k]
                k += 1
                for dx, dy in ((0, 1), (0, -1), (1, 0), (-1, 0)):
                    xx = x + dx
                    yy = y + dy
                    if not (0 <= xx < N and 0 <= yy < N):
                        continue
                    if not visited[xx][yy] and L <= abs(mat[x][y] - mat[xx][yy]) <= R:
                        flag = True
                        visited[xx][yy] = 1
                        q.append((xx, yy))
                        res += mat[xx][yy]

            for XY in q:
                mat[XY[0]][XY[1]] = res // len(q)
    return flag


N, L, R = map(int, input().split())
mat = [list(map(int, input().split())) for _ in range(N)]

total_count = 0

while True:
    if not bfs():
        break
    else:
        total_count += 1

print(total_count)
